// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Estimates the nutritional value of a list of ingredients.
 *
 * - estimateNutritionalValue - A function that estimates the nutritional value of a list of ingredients.
 * - EstimateNutritionalValueInput - The input type for the estimateNutritionalValue function.
 * - EstimateNutritionalValueOutput - The return type for the estimateNutritionalValue function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const EstimateNutritionalValueInputSchema = z.object({
  ingredients: z
    .array(
      z.object({
        name: z.string().describe('The name of the ingredient.'),
        quantity: z.string().describe('The quantity of the ingredient (e.g., 1 cup, 100g).'),
      })
    )
    .describe('A list of ingredients and their quantities.'),
});
export type EstimateNutritionalValueInput = z.infer<typeof EstimateNutritionalValueInputSchema>;

const EstimateNutritionalValueOutputSchema = z.object({
  nutritionalValues: z
    .array(
      z.object({
        name: z.string().describe('The name of the ingredient.'),
        calories: z.number().describe('The estimated calories of the ingredient.'),
        protein: z.number().describe('The estimated protein content of the ingredient (in grams).'),
        fat: z.number().describe('The estimated fat content of the ingredient (in grams).'),
        carbohydrates: z
          .number()
          .describe('The estimated carbohydrate content of the ingredient (in grams).'),
      })
    )
    .describe('A list of ingredients and their estimated nutritional values.'),
});
export type EstimateNutritionalValueOutput = z.infer<typeof EstimateNutritionalValueOutputSchema>;

export async function estimateNutritionalValue(
  input: EstimateNutritionalValueInput
): Promise<EstimateNutritionalValueOutput> {
  return estimateNutritionalValueFlow(input);
}

const estimateNutritionalValuePrompt = ai.definePrompt({
  name: 'estimateNutritionalValuePrompt',
  input: {
    schema: z.object({
      ingredients: z
        .array(
          z.object({
            name: z.string().describe('The name of the ingredient.'),
            quantity: z.string().describe('The quantity of the ingredient (e.g., 1 cup, 100g).'),
          })
        )
        .describe('A list of ingredients and their quantities.'),
    }),
  },
  output: {
    schema: z.object({
      nutritionalValues: z
        .array(
          z.object({
            name: z.string().describe('The name of the ingredient.'),
            calories: z.number().describe('The estimated calories of the ingredient.'),
            protein: z.number().describe('The estimated protein content of the ingredient (in grams).'),
            fat: z.number().describe('The estimated fat content of the ingredient (in grams).'),
            carbohydrates: z
              .number()
              .describe('The estimated carbohydrate content of the ingredient (in grams).'),
          })
        )
        .describe('A list of ingredients and their estimated nutritional values.'),
    }),
  },
  prompt: `You are a nutritional expert. Estimate the nutritional values (calories, protein, fat, carbohydrates) for each ingredient in the following list:

{{#each ingredients}}
- Name: {{{this.name}}}, Quantity: {{{this.quantity}}}
{{/each}}

Return the nutritional values for each ingredient.
`,
});

const estimateNutritionalValueFlow = ai.defineFlow<
  typeof EstimateNutritionalValueInputSchema,
  typeof EstimateNutritionalValueOutputSchema
>(
  {
    name: 'estimateNutritionalValueFlow',
    inputSchema: EstimateNutritionalValueInputSchema,
    outputSchema: EstimateNutritionalValueOutputSchema,
  },
  async input => {
    const {output} = await estimateNutritionalValuePrompt(input);
    return output!;
  }
);
